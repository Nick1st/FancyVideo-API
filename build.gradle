//#####################################################################################################################
//                                        Build Plugin Declaration
//#####################################################################################################################
buildscript {
    // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
    repositories {
        maven { url = 'https://maven.minecraftforge.net' } // Forge Maven
        maven { url = 'https://maven.parchmentmc.org' } // Parchment
        gradlePluginPortal() // Repo for Gradle plugins, we need to get ShadowJar, as we need to create a fat jar.
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'



//#####################################################################################################################
//                                             Artefact Specification
//#####################################################################################################################
version = '1.16.5-0.0.1.0-beta'
group = 'nick1st.fancyvideo'
archivesBaseName = 'FancyVideo-API'



//#####################################################################################################################
//                                      Configs for different gradle Plugins
//#####################################################################################################################
configurations.all {
    resolutionStrategy {
        force 'net.java.dev.jna:jna:4.5.2', 'net.java.dev.jna:jna-platform:4.5.2'
    }
}


java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version'))

minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // This one's important, why is the default config so bad?
            property 'log4j.configurationFile', 'config\\log4j2.xml'
            mods {
                vlcjtest {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // This one's important, why is the default config so bad?
            property 'log4j.configurationFile', 'config\\log4j2.xml'
            mods {
                vlcjtest {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { // Add Caprica's Github to get access to the Snapshot builds
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/caprica/vlcj")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.23'
    implementation("uk.co.caprica:vlcj:${vlcj_version}") // vlcJ
}

// Make builds reproducible
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}



//#####################################################################################################################
//                                                   Jar Builds
//#####################################################################################################################
jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "fancyvideo-api",
                "Specification-Vendor"    : "Nick1st",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version, // Use normal jar version instead the one from the jar task, as this results into a not calculated constant error in the manifest file
                "Implementation-Vendor"   : "Nick1st",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar { // Task to create a fat Jar containing our lib.
    archiveBaseName.set(project.name)
    archiveClassifier.set('fat')
    archiveVersion.set(project.version as String)

    // Dependency filter, we only need caprica's libraries.
    dependencies {
        exclude(dependency {
            it.moduleGroup != 'uk.co.caprica'
        })
    }

    //minimize() // Call minimize so we only get required (used) classes from vlcj
}

task toFinalJar (type: Jar) {
    doFirst {
        try {
            copy{
                from(zipTree("${project.buildDir}/libs/${project.name}-${project.version}-fat.jar"))
                into("${project.buildDir}/libs/buildFolder")
            }
        } catch (Exception ignored) {

        }
    }
    from 'build/libs/buildFolder'
    exclude('**/*maven*')
    archiveBaseName.set(project.name)
    archiveClassifier.set('full')
    archiveVersion.set(project.version as String)
    doLast {
        delete(files("${project.buildDir}/libs/buildFolder", "${project.buildDir}/libs/${project.name}-${project.version}-fat.jar"))
    }
    doLast {
        reobfJar
    }
}

task buildRelease () {
    dependsOn 'build'
    dependsOn 'shadowJar'
    dependsOn 'toFinalJar'

    tasks.findByName('shadowJar').mustRunAfter 'build'
    tasks.findByName('toFinalJar').mustRunAfter 'shadowJar'
}

jar.finalizedBy('reobfJar')

publish.dependsOn('reobfJar')

//#####################################################################################################################
//                                                   Publish
//#####################################################################################################################
publishing{
    publications{
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}