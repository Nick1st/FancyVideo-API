//#####################################################################################################################
//                                        Build Plugin Declaration
//#####################################################################################################################
buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal() // Repo for Gradle plugins, we need to get ShadowJar.
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.0' // ShadowJar, we need to create a fat jar.
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow' // Apply ShadowJar

group = 'nick1st'
version = '1.0-SNAPSHOT'



//#####################################################################################################################
//                                      Configs for different gradle Plugins
//#####################################################################################################################

java {
    archivesBaseName = 'fancyvideo'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // This ones important, why is the default config so bad?
            property 'log4j.configurationFile', 'config\\log4j2.xml'
            arg "-mixin.config=fancyvideo.mixins.json"
            mods {
                vlcjtest {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=fancyvideo.mixins.json"
            mods {
                vlcjtest {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'vlcjtest', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                vlcjtest {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "fancyvideo.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // Add Caprica's Github to get access to the Snapshot builds
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/caprica/vlcj")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
         dir 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.8'
    implementation("uk.co.caprica:vlcj:${vlcj_version}") // vlcJ
    annotationProcessor 'org.spongepowered:mixin:0.8:processor' // Mixin
    implementation files('libs/dev_konkrete_forge_1.3.2_MC_1.16.2-1.16.5.jar') // Konkrete
    implementation files('libs/dev_fancymenu_forge_2.4.3_MC_1.16.2-1.16.5.jar') // FancyMenu
}

// Make builds reproducible
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}



//#####################################################################################################################
//                                                   Jar Builds
//#####################################################################################################################
jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "vlcjtest",
                "Specification-Vendor"    : "Nick1st",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version, // Use normal jar version instead the one from the jar task, as this results into a not calculated constant error in the manifest file
                "Implementation-Vendor"   : "Nick1st",
                "MixinConfigs"            : "fancyvideo.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar { // Task to create a fat Jar containing our lib.
    archiveBaseName.set(project.name)
    archiveClassifier.set('fat')
    archiveVersion.set(project.version as String)

    // Dependency filter, we only need caprica's libraries.
    dependencies {
        exclude(dependency {
            it.moduleGroup != 'uk.co.caprica'
        })
    }

    minimize() // Call minimize so we only get required (used) classes from vlcj
}

task toJar (type: Jar) {
    doFirst {
        try {
            copy{
                from(zipTree("${project.buildDir}/libs/fancyvideo-1.0-SNAPSHOT-fat.jar"))
                into("${project.buildDir}/libs/Test")
            }
        } catch (Exception ignored) {

        }
    }
    from 'build/libs/Test'
    exclude('**/*maven*')
    archiveBaseName.set(project.name)
    archiveClassifier.set('full')
    archiveVersion.set(project.version as String)
    doLast {
        delete(files("${project.buildDir}/libs/Test", "${project.buildDir}/libs/fancyvideo-1.0-SNAPSHOT-fat.jar"))
    }
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfJar', 'toJar')
